{"ast":null,"code":"import { ClassTransformer } from './ClassTransformer';\nexport { ClassTransformer } from './ClassTransformer';\nexport * from './decorators';\nexport * from './interfaces';\nexport * from './enums';\nvar classTransformer = new ClassTransformer();\nexport function classToPlain(object, options) {\n  return classTransformer.classToPlain(object, options);\n}\nexport function classToPlainFromExist(object, plainObject, options) {\n  return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\nexport function plainToClass(cls, plain, options) {\n  return classTransformer.plainToClass(cls, plain, options);\n}\nexport function plainToClassFromExist(clsObject, plain, options) {\n  return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\nexport function classToClass(object, options) {\n  return classTransformer.classToClass(object, options);\n}\nexport function classToClassFromExist(object, fromObject, options) {\n  return classTransformer.classToClassFromExist(object, fromObject, options);\n}\nexport function serialize(object, options) {\n  return classTransformer.serialize(object, options);\n}\n/**\n * Deserializes given JSON string to a object of the given class.\n */\n\nexport function deserialize(cls, json, options) {\n  return classTransformer.deserialize(cls, json, options);\n}\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\n\nexport function deserializeArray(cls, json, options) {\n  return classTransformer.deserializeArray(cls, json, options);\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,QAAiC,oBAAjC;AAIA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,cAAc,cAAd;AACA,cAAc,cAAd;AACA,cAAc,SAAd;AAEA,IAAM,gBAAgB,GAAG,IAAI,gBAAJ,EAAzB;AAOA,OAAM,SAAU,YAAV,CACJ,MADI,EAEJ,OAFI,EAE2B;AAE/B,SAAO,gBAAgB,CAAC,YAAjB,CAA8B,MAA9B,EAAsC,OAAtC,CAAP;AACD;AAiBD,OAAM,SAAU,qBAAV,CACJ,MADI,EAEJ,WAFI,EAGJ,OAHI,EAG2B;AAE/B,SAAO,gBAAgB,CAAC,qBAAjB,CAAuC,MAAvC,EAA+C,WAA/C,EAA4D,OAA5D,CAAP;AACD;AAOD,OAAM,SAAU,YAAV,CAA6B,GAA7B,EAAuD,KAAvD,EAAuE,OAAvE,EAAsG;AAC1G,SAAO,gBAAgB,CAAC,YAAjB,CAA8B,GAA9B,EAAmC,KAAnC,EAAiD,OAAjD,CAAP;AACD;AASD,OAAM,SAAU,qBAAV,CAAsC,SAAtC,EAAoD,KAApD,EAAoE,OAApE,EAAmG;AACvG,SAAO,gBAAgB,CAAC,qBAAjB,CAAuC,SAAvC,EAAkD,KAAlD,EAAyD,OAAzD,CAAP;AACD;AAOD,OAAM,SAAU,YAAV,CAA0B,MAA1B,EAA2C,OAA3C,EAA0E;AAC9E,SAAO,gBAAgB,CAAC,YAAjB,CAA8B,MAA9B,EAAsC,OAAtC,CAAP;AACD;AASD,OAAM,SAAU,qBAAV,CAAmC,MAAnC,EAA8C,UAA9C,EAAmE,OAAnE,EAAkG;AACtG,SAAO,gBAAgB,CAAC,qBAAjB,CAAuC,MAAvC,EAA+C,UAA/C,EAA2D,OAA3D,CAAP;AACD;AAOD,OAAM,SAAU,SAAV,CAAuB,MAAvB,EAAwC,OAAxC,EAAuE;AAC3E,SAAO,gBAAgB,CAAC,SAAjB,CAA2B,MAA3B,EAAmC,OAAnC,CAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,WAAV,CAAyB,GAAzB,EAAmD,IAAnD,EAAiE,OAAjE,EAAgG;AACpG,SAAO,gBAAgB,CAAC,WAAjB,CAA6B,GAA7B,EAAkC,IAAlC,EAAwC,OAAxC,CAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,gBAAV,CAA8B,GAA9B,EAAwD,IAAxD,EAAsE,OAAtE,EAAqG;AACzG,SAAO,gBAAgB,CAAC,gBAAjB,CAAkC,GAAlC,EAAuC,IAAvC,EAA6C,OAA7C,CAAP;AACD","sourcesContent":["import { ClassTransformer } from './ClassTransformer';\nimport { ClassTransformOptions } from './interfaces';\nimport { ClassConstructor } from './interfaces';\n\nexport { ClassTransformer } from './ClassTransformer';\nexport * from './decorators';\nexport * from './interfaces';\nexport * from './enums';\n\nconst classTransformer = new ClassTransformer();\n\n/**\n * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n */\nexport function classToPlain<T>(object: T, options?: ClassTransformOptions): Record<string, any>;\nexport function classToPlain<T>(object: T[], options?: ClassTransformOptions): Record<string, any>[];\nexport function classToPlain<T>(\n  object: T | T[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.classToPlain(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObject: Record<string, any>,\n  options?: ClassTransformOptions\n): Record<string, any>;\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObjects: Record<string, any>[],\n  options?: ClassTransformOptions\n): Record<string, any>[];\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObject: Record<string, any> | Record<string, any>[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n */\nexport function plainToClass<T, V>(cls: ClassConstructor<T>, plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClass<T, V>(cls: ClassConstructor<T>, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClass<T, V>(cls: ClassConstructor<T>, plain: V | V[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.plainToClass(cls, plain as any, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object.\n * Uses given object as source object (it means fills given object with data from plain object).\n *  Also works with arrays.\n */\nexport function plainToClassFromExist<T, V>(clsObject: T[], plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V | V[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\n\n/**\n * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n */\nexport function classToClass<T>(object: T, options?: ClassTransformOptions): T;\nexport function classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\nexport function classToClass<T>(object: T | T[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.classToClass(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\nexport function classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\nexport function classToClassFromExist<T>(object: T, fromObject: T | T[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.classToClassFromExist(object, fromObject, options);\n}\n\n/**\n * Serializes given object to a JSON string.\n */\nexport function serialize<T>(object: T, options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T[], options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T | T[], options?: ClassTransformOptions): string {\n  return classTransformer.serialize(object, options);\n}\n\n/**\n * Deserializes given JSON string to a object of the given class.\n */\nexport function deserialize<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T {\n  return classTransformer.deserialize(cls, json, options);\n}\n\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\nexport function deserializeArray<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T[] {\n  return classTransformer.deserializeArray(cls, json, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}