{"ast":null,"code":"import { defaultMetadataStorage } from '../storage';\n/**\n * Defines a custom logic for value transformation.\n *\n * Can be applied to properties only.\n */\n\nexport function Transform(transformFn, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return function (target, propertyName) {\n    defaultMetadataStorage.addTransformMetadata({\n      target: target.constructor,\n      propertyName: propertyName,\n      transformFn: transformFn,\n      options: options\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/decorators/transform.decorator.ts"],"names":[],"mappings":"AAAA,SAAS,sBAAT,QAAuC,YAAvC;AAGA;;;;AAIG;;AACH,OAAM,SAAU,SAAV,CACJ,WADI,EAEJ,OAFI,EAE0B;AAA9B,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA8B;;AAE9B,SAAO,UAAU,MAAV,EAAuB,YAAvB,EAAoD;AACzD,IAAA,sBAAsB,CAAC,oBAAvB,CAA4C;AAC1C,MAAA,MAAM,EAAE,MAAM,CAAC,WAD2B;AAE1C,MAAA,YAAY,EAAE,YAF4B;AAG1C,MAAA,WAAW,EAAA,WAH+B;AAI1C,MAAA,OAAO,EAAA;AAJmC,KAA5C;AAMD,GAPD;AAQD","sourcesContent":["import { defaultMetadataStorage } from '../storage';\nimport { TransformFnParams, TransformOptions } from '../interfaces';\n\n/**\n * Defines a custom logic for value transformation.\n *\n * Can be applied to properties only.\n */\nexport function Transform(\n  transformFn: (params: TransformFnParams) => any,\n  options: TransformOptions = {}\n): PropertyDecorator {\n  return function (target: any, propertyName: string | Symbol): void {\n    defaultMetadataStorage.addTransformMetadata({\n      target: target.constructor,\n      propertyName: propertyName as string,\n      transformFn,\n      options,\n    });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}