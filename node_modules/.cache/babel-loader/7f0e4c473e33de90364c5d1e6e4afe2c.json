{"ast":null,"code":"import { classToPlain, deserializeArray } from 'class-transformer';\nimport { MainAxios } from '../MainAxios';\nimport { Product } from '../Models/Product';\nimport { Session } from '../Models/Session';\nexport class ApiService {\n  getType() {\n    return this.constructor.name;\n  }\n\n  async getProducts() {\n    const axios = MainAxios.GetInstance();\n    const response = await axios.get('/products');\n\n    if (response != null && response.status === 200) {\n      let products = deserializeArray(Product, JSON.stringify(response.data['products']), {\n        excludeExtraneousValues: true\n      });\n      return products;\n    }\n\n    return [];\n  }\n\n  async getAvailabilitiesFor(productCode) {\n    const axios = MainAxios.GetInstance();\n    const response = await axios.get('/availability?productCode=' + productCode);\n\n    if (response != null && response.status === 200) {\n      let sessions = deserializeArray(Session, JSON.stringify(response.data['sessions']));\n      return sessions;\n    }\n\n    return [];\n  }\n\n  async createBooking(resource) {\n    const axios = MainAxios.GetInstance();\n    const response = await axios.post('/booking', classToPlain(resource), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      }\n    });\n\n    if (response != null && (response.status === 201 || response.status === 200)) {}\n  }\n\n}","map":{"version":3,"sources":["/run/media/pearlquest/DATA/rezdyV2/rezdy-ksa/src/System/Services/ApiService.ts"],"names":["classToPlain","deserializeArray","MainAxios","Product","Session","ApiService","getType","constructor","name","getProducts","axios","GetInstance","response","get","status","products","JSON","stringify","data","excludeExtraneousValues","getAvailabilitiesFor","productCode","sessions","createBooking","resource","post","method","headers","Accept"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,mBAA/C;AAGA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,OAAO,MAAMC,UAAN,CAAkD;AACvDC,EAAAA,OAAO,GAAW;AAChB,WAAO,KAAKC,WAAL,CAAiBC,IAAxB;AACD;;AAEgB,QAAXC,WAAW,GAA8B;AAC7C,UAAMC,KAAK,GAAGR,SAAS,CAACS,WAAV,EAAd;AACA,UAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,WAAV,CAAvB;;AAEA,QAAID,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACE,MAAT,KAAoB,GAA5C,EAAiD;AAC/C,UAAIC,QAAmB,GAAGd,gBAAgB,CACxCE,OADwC,EAExCa,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACM,IAAT,CAAc,UAAd,CAAf,CAFwC,EAGxC;AACEC,QAAAA,uBAAuB,EAAE;AAD3B,OAHwC,CAA1C;AAQA,aAAOJ,QAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAEyB,QAApBK,oBAAoB,CAACC,WAAD,EAAiD;AACzE,UAAMX,KAAK,GAAGR,SAAS,CAACS,WAAV,EAAd;AACA,UAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CACrB,+BAA+BQ,WADV,CAAvB;;AAIA,QAAIT,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACE,MAAT,KAAoB,GAA5C,EAAiD;AAC/C,UAAIQ,QAAmB,GAAGrB,gBAAgB,CACxCG,OADwC,EAExCY,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACM,IAAT,CAAc,UAAd,CAAf,CAFwC,CAA1C;AAKA,aAAOI,QAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAEkB,QAAbC,aAAa,CAACC,QAAD,EAA0C;AAC3D,UAAMd,KAAK,GAAGR,SAAS,CAACS,WAAV,EAAd;AAEA,UAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACe,IAAN,CAAW,UAAX,EAAuBzB,YAAY,CAACwB,QAAD,CAAnC,EAA+C;AACpEE,MAAAA,MAAM,EAAE,MAD4D;AAEpEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAF2D,KAA/C,CAAvB;;AAQA,QACEhB,QAAQ,IAAI,IAAZ,KACCA,QAAQ,CAACE,MAAT,KAAoB,GAApB,IAA2BF,QAAQ,CAACE,MAAT,KAAoB,GADhD,CADF,EAGE,CACD;AACF;;AA1DsD","sourcesContent":["import { classToPlain, deserializeArray } from 'class-transformer';\nimport { IApiService } from '../Interfaces/IApiService';\nimport { IService } from '../Interfaces/IService';\nimport { MainAxios } from '../MainAxios';\nimport { BookingResource } from '../Models/BookingResource';\nimport { Product } from '../Models/Product';\nimport { Session } from '../Models/Session';\n\nexport class ApiService implements IService, IApiService {\n  getType(): string {\n    return this.constructor.name;\n  }\n\n  async getProducts(): Promise<Product[] | null> {\n    const axios = MainAxios.GetInstance();\n    const response = await axios.get('/products');\n\n    if (response != null && response.status === 200) {\n      let products: Product[] = deserializeArray(\n        Product,\n        JSON.stringify(response.data['products']),\n        {\n          excludeExtraneousValues: true,\n        }\n      );\n\n      return products;\n    }\n\n    return [];\n  }\n\n  async getAvailabilitiesFor(productCode: string): Promise<Session[] | null> {\n    const axios = MainAxios.GetInstance();\n    const response = await axios.get(\n      '/availability?productCode=' + productCode\n    );\n\n    if (response != null && response.status === 200) {\n      let sessions: Session[] = deserializeArray(\n        Session,\n        JSON.stringify(response.data['sessions'])\n      );\n\n      return sessions;\n    }\n\n    return [];\n  }\n\n  async createBooking(resource: BookingResource): Promise<any> {\n    const axios = MainAxios.GetInstance();\n    \n    const response = await axios.post('/booking', classToPlain(resource), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    });\n\n    if (\n      response != null &&\n      (response.status === 201 || response.status === 200)\n    ) {\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}