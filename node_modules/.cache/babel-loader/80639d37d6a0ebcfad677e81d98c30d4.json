{"ast":null,"code":"import { TransformationType } from './enums';\n/**\n * Storage all library metadata.\n */\n\nvar MetadataStorage = function () {\n  function MetadataStorage() {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n    this._typeMetadatas = new Map();\n    this._transformMetadatas = new Map();\n    this._exposeMetadatas = new Map();\n    this._excludeMetadatas = new Map();\n    this._ancestorsMap = new Map();\n  } // -------------------------------------------------------------------------\n  // Adder Methods\n  // -------------------------------------------------------------------------\n\n\n  MetadataStorage.prototype.addTypeMetadata = function (metadata) {\n    if (!this._typeMetadatas.has(metadata.target)) {\n      this._typeMetadatas.set(metadata.target, new Map());\n    }\n\n    this._typeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n  };\n\n  MetadataStorage.prototype.addTransformMetadata = function (metadata) {\n    if (!this._transformMetadatas.has(metadata.target)) {\n      this._transformMetadatas.set(metadata.target, new Map());\n    }\n\n    if (!this._transformMetadatas.get(metadata.target).has(metadata.propertyName)) {\n      this._transformMetadatas.get(metadata.target).set(metadata.propertyName, []);\n    }\n\n    this._transformMetadatas.get(metadata.target).get(metadata.propertyName).push(metadata);\n  };\n\n  MetadataStorage.prototype.addExposeMetadata = function (metadata) {\n    if (!this._exposeMetadatas.has(metadata.target)) {\n      this._exposeMetadatas.set(metadata.target, new Map());\n    }\n\n    this._exposeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n  };\n\n  MetadataStorage.prototype.addExcludeMetadata = function (metadata) {\n    if (!this._excludeMetadatas.has(metadata.target)) {\n      this._excludeMetadatas.set(metadata.target, new Map());\n    }\n\n    this._excludeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n  }; // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n\n  MetadataStorage.prototype.findTransformMetadatas = function (target, propertyName, transformationType) {\n    return this.findMetadatas(this._transformMetadatas, target, propertyName).filter(function (metadata) {\n      if (!metadata.options) return true;\n      if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true) return true;\n\n      if (metadata.options.toClassOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_CLASS || transformationType === TransformationType.PLAIN_TO_CLASS;\n      }\n\n      if (metadata.options.toPlainOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_PLAIN;\n      }\n\n      return true;\n    });\n  };\n\n  MetadataStorage.prototype.findExcludeMetadata = function (target, propertyName) {\n    return this.findMetadata(this._excludeMetadatas, target, propertyName);\n  };\n\n  MetadataStorage.prototype.findExposeMetadata = function (target, propertyName) {\n    return this.findMetadata(this._exposeMetadatas, target, propertyName);\n  };\n\n  MetadataStorage.prototype.findExposeMetadataByCustomName = function (target, name) {\n    return this.getExposedMetadatas(target).find(function (metadata) {\n      return metadata.options && metadata.options.name === name;\n    });\n  };\n\n  MetadataStorage.prototype.findTypeMetadata = function (target, propertyName) {\n    return this.findMetadata(this._typeMetadatas, target, propertyName);\n  };\n\n  MetadataStorage.prototype.getStrategy = function (target) {\n    var excludeMap = this._excludeMetadatas.get(target);\n\n    var exclude = excludeMap && excludeMap.get(undefined);\n\n    var exposeMap = this._exposeMetadatas.get(target);\n\n    var expose = exposeMap && exposeMap.get(undefined);\n    if (exclude && expose || !exclude && !expose) return 'none';\n    return exclude ? 'excludeAll' : 'exposeAll';\n  };\n\n  MetadataStorage.prototype.getExposedMetadatas = function (target) {\n    return this.getMetadata(this._exposeMetadatas, target);\n  };\n\n  MetadataStorage.prototype.getExcludedMetadatas = function (target) {\n    return this.getMetadata(this._excludeMetadatas, target);\n  };\n\n  MetadataStorage.prototype.getExposedProperties = function (target, transformationType) {\n    return this.getExposedMetadatas(target).filter(function (metadata) {\n      if (!metadata.options) return true;\n      if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true) return true;\n\n      if (metadata.options.toClassOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_CLASS || transformationType === TransformationType.PLAIN_TO_CLASS;\n      }\n\n      if (metadata.options.toPlainOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_PLAIN;\n      }\n\n      return true;\n    }).map(function (metadata) {\n      return metadata.propertyName;\n    });\n  };\n\n  MetadataStorage.prototype.getExcludedProperties = function (target, transformationType) {\n    return this.getExcludedMetadatas(target).filter(function (metadata) {\n      if (!metadata.options) return true;\n      if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true) return true;\n\n      if (metadata.options.toClassOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_CLASS || transformationType === TransformationType.PLAIN_TO_CLASS;\n      }\n\n      if (metadata.options.toPlainOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_PLAIN;\n      }\n\n      return true;\n    }).map(function (metadata) {\n      return metadata.propertyName;\n    });\n  };\n\n  MetadataStorage.prototype.clear = function () {\n    this._typeMetadatas.clear();\n\n    this._exposeMetadatas.clear();\n\n    this._excludeMetadatas.clear();\n\n    this._ancestorsMap.clear();\n  }; // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n\n  MetadataStorage.prototype.getMetadata = function (metadatas, target) {\n    var metadataFromTargetMap = metadatas.get(target);\n    var metadataFromTarget;\n\n    if (metadataFromTargetMap) {\n      metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter(function (meta) {\n        return meta.propertyName !== undefined;\n      });\n    }\n\n    var metadataFromAncestors = [];\n\n    for (var _i = 0, _a = this.getAncestors(target); _i < _a.length; _i++) {\n      var ancestor = _a[_i];\n      var ancestorMetadataMap = metadatas.get(ancestor);\n\n      if (ancestorMetadataMap) {\n        var metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter(function (meta) {\n          return meta.propertyName !== undefined;\n        });\n        metadataFromAncestors.push.apply(metadataFromAncestors, metadataFromAncestor);\n      }\n    }\n\n    return metadataFromAncestors.concat(metadataFromTarget || []);\n  };\n\n  MetadataStorage.prototype.findMetadata = function (metadatas, target, propertyName) {\n    var metadataFromTargetMap = metadatas.get(target);\n\n    if (metadataFromTargetMap) {\n      var metadataFromTarget = metadataFromTargetMap.get(propertyName);\n\n      if (metadataFromTarget) {\n        return metadataFromTarget;\n      }\n    }\n\n    for (var _i = 0, _a = this.getAncestors(target); _i < _a.length; _i++) {\n      var ancestor = _a[_i];\n      var ancestorMetadataMap = metadatas.get(ancestor);\n\n      if (ancestorMetadataMap) {\n        var ancestorResult = ancestorMetadataMap.get(propertyName);\n\n        if (ancestorResult) {\n          return ancestorResult;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  MetadataStorage.prototype.findMetadatas = function (metadatas, target, propertyName) {\n    var metadataFromTargetMap = metadatas.get(target);\n    var metadataFromTarget;\n\n    if (metadataFromTargetMap) {\n      metadataFromTarget = metadataFromTargetMap.get(propertyName);\n    }\n\n    var metadataFromAncestorsTarget = [];\n\n    for (var _i = 0, _a = this.getAncestors(target); _i < _a.length; _i++) {\n      var ancestor = _a[_i];\n      var ancestorMetadataMap = metadatas.get(ancestor);\n\n      if (ancestorMetadataMap) {\n        if (ancestorMetadataMap.has(propertyName)) {\n          metadataFromAncestorsTarget.push.apply(metadataFromAncestorsTarget, ancestorMetadataMap.get(propertyName));\n        }\n      }\n    }\n\n    return metadataFromAncestorsTarget.slice().reverse().concat((metadataFromTarget || []).slice().reverse());\n  };\n\n  MetadataStorage.prototype.getAncestors = function (target) {\n    if (!target) return [];\n\n    if (!this._ancestorsMap.has(target)) {\n      var ancestors = [];\n\n      for (var baseClass = Object.getPrototypeOf(target.prototype.constructor); typeof baseClass.prototype !== 'undefined'; baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)) {\n        ancestors.push(baseClass);\n      }\n\n      this._ancestorsMap.set(target, ancestors);\n    }\n\n    return this._ancestorsMap.get(target);\n  };\n\n  return MetadataStorage;\n}();\n\nexport { MetadataStorage };","map":{"version":3,"sources":["../../src/MetadataStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { TypeMetadata, ExposeMetadata, ExcludeMetadata, TransformMetadata } from './interfaces';\nimport { TransformationType } from './enums';\n\n/**\n * Storage all library metadata.\n */\nexport class MetadataStorage {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  private _typeMetadatas = new Map<Function, Map<string, TypeMetadata>>();\n  private _transformMetadatas = new Map<Function, Map<string, TransformMetadata[]>>();\n  private _exposeMetadatas = new Map<Function, Map<string, ExposeMetadata>>();\n  private _excludeMetadatas = new Map<Function, Map<string, ExcludeMetadata>>();\n  private _ancestorsMap = new Map<Function, Function[]>();\n\n  // -------------------------------------------------------------------------\n  // Adder Methods\n  // -------------------------------------------------------------------------\n\n  addTypeMetadata(metadata: TypeMetadata): void {\n    if (!this._typeMetadatas.has(metadata.target)) {\n      this._typeMetadatas.set(metadata.target, new Map<string, TypeMetadata>());\n    }\n    this._typeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n  }\n\n  addTransformMetadata(metadata: TransformMetadata): void {\n    if (!this._transformMetadatas.has(metadata.target)) {\n      this._transformMetadatas.set(metadata.target, new Map<string, TransformMetadata[]>());\n    }\n    if (!this._transformMetadatas.get(metadata.target).has(metadata.propertyName)) {\n      this._transformMetadatas.get(metadata.target).set(metadata.propertyName, []);\n    }\n    this._transformMetadatas.get(metadata.target).get(metadata.propertyName).push(metadata);\n  }\n\n  addExposeMetadata(metadata: ExposeMetadata): void {\n    if (!this._exposeMetadatas.has(metadata.target)) {\n      this._exposeMetadatas.set(metadata.target, new Map<string, ExposeMetadata>());\n    }\n    this._exposeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n  }\n\n  addExcludeMetadata(metadata: ExcludeMetadata): void {\n    if (!this._excludeMetadatas.has(metadata.target)) {\n      this._excludeMetadatas.set(metadata.target, new Map<string, ExcludeMetadata>());\n    }\n    this._excludeMetadatas.get(metadata.target).set(metadata.propertyName, metadata);\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  findTransformMetadatas(\n    target: Function,\n    propertyName: string,\n    transformationType: TransformationType\n  ): TransformMetadata[] {\n    return this.findMetadatas(this._transformMetadatas, target, propertyName).filter(metadata => {\n      if (!metadata.options) return true;\n      if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true) return true;\n\n      if (metadata.options.toClassOnly === true) {\n        return (\n          transformationType === TransformationType.CLASS_TO_CLASS ||\n          transformationType === TransformationType.PLAIN_TO_CLASS\n        );\n      }\n      if (metadata.options.toPlainOnly === true) {\n        return transformationType === TransformationType.CLASS_TO_PLAIN;\n      }\n\n      return true;\n    });\n  }\n\n  findExcludeMetadata(target: Function, propertyName: string): ExcludeMetadata {\n    return this.findMetadata(this._excludeMetadatas, target, propertyName);\n  }\n\n  findExposeMetadata(target: Function, propertyName: string): ExposeMetadata {\n    return this.findMetadata(this._exposeMetadatas, target, propertyName);\n  }\n\n  findExposeMetadataByCustomName(target: Function, name: string): ExposeMetadata {\n    return this.getExposedMetadatas(target).find(metadata => {\n      return metadata.options && metadata.options.name === name;\n    });\n  }\n\n  findTypeMetadata(target: Function, propertyName: string): TypeMetadata {\n    return this.findMetadata(this._typeMetadatas, target, propertyName);\n  }\n\n  getStrategy(target: Function): 'excludeAll' | 'exposeAll' | 'none' {\n    const excludeMap = this._excludeMetadatas.get(target);\n    const exclude = excludeMap && excludeMap.get(undefined);\n    const exposeMap = this._exposeMetadatas.get(target);\n    const expose = exposeMap && exposeMap.get(undefined);\n    if ((exclude && expose) || (!exclude && !expose)) return 'none';\n    return exclude ? 'excludeAll' : 'exposeAll';\n  }\n\n  getExposedMetadatas(target: Function): ExposeMetadata[] {\n    return this.getMetadata(this._exposeMetadatas, target);\n  }\n\n  getExcludedMetadatas(target: Function): ExcludeMetadata[] {\n    return this.getMetadata(this._excludeMetadatas, target);\n  }\n\n  getExposedProperties(target: Function, transformationType: TransformationType): string[] {\n    return this.getExposedMetadatas(target)\n      .filter(metadata => {\n        if (!metadata.options) return true;\n        if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true) return true;\n\n        if (metadata.options.toClassOnly === true) {\n          return (\n            transformationType === TransformationType.CLASS_TO_CLASS ||\n            transformationType === TransformationType.PLAIN_TO_CLASS\n          );\n        }\n        if (metadata.options.toPlainOnly === true) {\n          return transformationType === TransformationType.CLASS_TO_PLAIN;\n        }\n\n        return true;\n      })\n      .map(metadata => metadata.propertyName);\n  }\n\n  getExcludedProperties(target: Function, transformationType: TransformationType): string[] {\n    return this.getExcludedMetadatas(target)\n      .filter(metadata => {\n        if (!metadata.options) return true;\n        if (metadata.options.toClassOnly === true && metadata.options.toPlainOnly === true) return true;\n\n        if (metadata.options.toClassOnly === true) {\n          return (\n            transformationType === TransformationType.CLASS_TO_CLASS ||\n            transformationType === TransformationType.PLAIN_TO_CLASS\n          );\n        }\n        if (metadata.options.toPlainOnly === true) {\n          return transformationType === TransformationType.CLASS_TO_PLAIN;\n        }\n\n        return true;\n      })\n      .map(metadata => metadata.propertyName);\n  }\n\n  clear(): void {\n    this._typeMetadatas.clear();\n    this._exposeMetadatas.clear();\n    this._excludeMetadatas.clear();\n    this._ancestorsMap.clear();\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n  private getMetadata<T extends { target: Function; propertyName: string }>(\n    metadatas: Map<Function, Map<string, T>>,\n    target: Function\n  ): T[] {\n    const metadataFromTargetMap = metadatas.get(target);\n    let metadataFromTarget: T[];\n    if (metadataFromTargetMap) {\n      metadataFromTarget = Array.from(metadataFromTargetMap.values()).filter(meta => meta.propertyName !== undefined);\n    }\n    const metadataFromAncestors: T[] = [];\n    for (const ancestor of this.getAncestors(target)) {\n      const ancestorMetadataMap = metadatas.get(ancestor);\n      if (ancestorMetadataMap) {\n        const metadataFromAncestor = Array.from(ancestorMetadataMap.values()).filter(\n          meta => meta.propertyName !== undefined\n        );\n        metadataFromAncestors.push(...metadataFromAncestor);\n      }\n    }\n    return metadataFromAncestors.concat(metadataFromTarget || []);\n  }\n\n  private findMetadata<T extends { target: Function; propertyName: string }>(\n    metadatas: Map<Function, Map<string, T>>,\n    target: Function,\n    propertyName: string\n  ): T {\n    const metadataFromTargetMap = metadatas.get(target);\n    if (metadataFromTargetMap) {\n      const metadataFromTarget = metadataFromTargetMap.get(propertyName);\n      if (metadataFromTarget) {\n        return metadataFromTarget;\n      }\n    }\n    for (const ancestor of this.getAncestors(target)) {\n      const ancestorMetadataMap = metadatas.get(ancestor);\n      if (ancestorMetadataMap) {\n        const ancestorResult = ancestorMetadataMap.get(propertyName);\n        if (ancestorResult) {\n          return ancestorResult;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  private findMetadatas<T extends { target: Function; propertyName: string }>(\n    metadatas: Map<Function, Map<string, T[]>>,\n    target: Function,\n    propertyName: string\n  ): T[] {\n    const metadataFromTargetMap = metadatas.get(target);\n    let metadataFromTarget: T[];\n    if (metadataFromTargetMap) {\n      metadataFromTarget = metadataFromTargetMap.get(propertyName);\n    }\n    const metadataFromAncestorsTarget: T[] = [];\n    for (const ancestor of this.getAncestors(target)) {\n      const ancestorMetadataMap = metadatas.get(ancestor);\n      if (ancestorMetadataMap) {\n        if (ancestorMetadataMap.has(propertyName)) {\n          metadataFromAncestorsTarget.push(...ancestorMetadataMap.get(propertyName));\n        }\n      }\n    }\n    return metadataFromAncestorsTarget\n      .slice()\n      .reverse()\n      .concat((metadataFromTarget || []).slice().reverse());\n  }\n\n  private getAncestors(target: Function): Function[] {\n    if (!target) return [];\n    if (!this._ancestorsMap.has(target)) {\n      const ancestors: Function[] = [];\n      for (\n        let baseClass = Object.getPrototypeOf(target.prototype.constructor);\n        typeof baseClass.prototype !== 'undefined';\n        baseClass = Object.getPrototypeOf(baseClass.prototype.constructor)\n      ) {\n        ancestors.push(baseClass);\n      }\n      this._ancestorsMap.set(target, ancestors);\n    }\n    return this._ancestorsMap.get(target);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}