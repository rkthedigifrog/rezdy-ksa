{"ast":null,"code":"import { defaultMetadataStorage } from '../storage';\n/**\n * Marks the given class or property as included. By default the property is included in both\n * constructorToPlain and plainToConstructor transformations. It can be limited to only one direction\n * via using the `toPlainOnly` or `toClassOnly` option.\n *\n * Can be applied to class definitions and properties.\n */\n\nexport function Expose(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  /**\n   * NOTE: The `propertyName` property must be marked as optional because\n   * this decorator used both as a class and a property decorator and the\n   * Typescript compiler will freak out if we make it mandatory as a class\n   * decorator only receives one parameter.\n   */\n\n\n  return function (object, propertyName) {\n    defaultMetadataStorage.addExposeMetadata({\n      target: object instanceof Function ? object : object.constructor,\n      propertyName: propertyName,\n      options: options\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/decorators/expose.decorator.ts"],"names":[],"mappings":"AAAA,SAAS,sBAAT,QAAuC,YAAvC;AAGA;;;;;;AAMG;;AACH,OAAM,SAAU,MAAV,CAAiB,OAAjB,EAA4C;AAA3B,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA2B;AAChD;;;;;AAKG;;;AACH,SAAO,UAAU,MAAV,EAAuB,YAAvB,EAAqD;AAC1D,IAAA,sBAAsB,CAAC,iBAAvB,CAAyC;AACvC,MAAA,MAAM,EAAE,MAAM,YAAY,QAAlB,GAA6B,MAA7B,GAAsC,MAAM,CAAC,WADd;AAEvC,MAAA,YAAY,EAAE,YAFyB;AAGvC,MAAA,OAAO,EAAA;AAHgC,KAAzC;AAKD,GAND;AAOD","sourcesContent":["import { defaultMetadataStorage } from '../storage';\nimport { ExposeOptions } from '../interfaces';\n\n/**\n * Marks the given class or property as included. By default the property is included in both\n * constructorToPlain and plainToConstructor transformations. It can be limited to only one direction\n * via using the `toPlainOnly` or `toClassOnly` option.\n *\n * Can be applied to class definitions and properties.\n */\nexport function Expose(options: ExposeOptions = {}): PropertyDecorator & ClassDecorator {\n  /**\n   * NOTE: The `propertyName` property must be marked as optional because\n   * this decorator used both as a class and a property decorator and the\n   * Typescript compiler will freak out if we make it mandatory as a class\n   * decorator only receives one parameter.\n   */\n  return function (object: any, propertyName?: string | Symbol): void {\n    defaultMetadataStorage.addExposeMetadata({\n      target: object instanceof Function ? object : object.constructor,\n      propertyName: propertyName as string,\n      options,\n    });\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}