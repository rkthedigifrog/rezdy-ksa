{"ast":null,"code":"import _applyDecoratedDescriptor from \"/run/media/pearlquest/DATA/rezdyV2/rezdy-ksa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport { BookingState } from \"../Enums/BookingState\";\nlet LogicStore = (_class = class LogicStore {\n  constructor() {\n    this.bookingState = BookingState.Initial;\n    this.visitorCount = 1;\n    this.product = null;\n    this.availableSessions = null;\n    this.selectedDate = null;\n    this.selectedLanguage = \"English\";\n    this.Extras = 0;\n    makeObservable(this, {\n      bookingState: observable,\n      visitorCount: observable,\n      product: observable,\n      availableSessions: observable,\n      selectedDate: observable,\n      selectedLanguage: observable,\n      Extras: observable,\n      setBookingState: action,\n      setProduct: action,\n      setAvailableSessions: action,\n      setVisitorsCount: action,\n      setSelectedDate: action,\n      setLanguage: action,\n      setExtras: action\n    });\n  }\n\n  setBookingState(value) {\n    this.bookingState = value;\n    console.log(\"BookingStateChanged:\", value);\n  }\n\n  setProduct(value) {\n    this.product = value;\n  }\n\n  setAvailableSessions(value) {\n    this.availableSessions = value;\n  }\n\n  setVisitorsCount(value) {\n    this.visitorCount = value;\n  }\n\n  setSelectedDate(date) {\n    console.log(\"Booking Target Date:\", date);\n    this.selectedDate = date;\n  }\n\n  setLanguage(language) {\n    console.log(\"Booking Target Date:\", language);\n    this.selectedLanguage = language;\n  }\n\n  setExtras(extras) {\n    console.log(\"Wheelchairs :\", extras);\n    this.Extras = extras;\n  }\n\n  getMinDate() {\n    const firstSession = this.availableSessions != null && this.availableSessions.length > 0 ? this.availableSessions[0] : null;\n    return firstSession != null ? firstSession.startTimeLocal : new Date();\n  }\n\n  getMaxDate() {\n    const lastSession = this.availableSessions != null && this.availableSessions.length > 0 ? this.availableSessions[this.availableSessions.length - 1] : null;\n    return lastSession != null ? lastSession.endTimeLocal : new Date(2022, 1, 1);\n  }\n\n  getAvailableHours() {\n    if (this.selectedDate != null && Store.availableSessions != null) {\n      var _Store$availableSessi;\n\n      let day = this.selectedDate.getUTCDate();\n      let availableHours = (_Store$availableSessi = Store.availableSessions) === null || _Store$availableSessi === void 0 ? void 0 : _Store$availableSessi.filter(q => q.startTime.getUTCDate() === day).map(value => value.startTimeLocal);\n      return availableHours;\n    }\n\n    return [];\n  }\n\n  getFirstAvailableHour() {\n    const available = this.getAvailableHours();\n    if (available.length > 0) return available[0];\n    return null;\n  }\n\n  getLastAvailableHour() {\n    const available = this.getAvailableHours();\n    if (available.length > 0) return available[available.length - 1];\n    return null;\n  }\n\n  getSelectedDate() {\n    let minDate = this.getMinDate();\n\n    if (minDate != null) {\n      if (this.selectedDate == null || this.selectedDate < minDate) this.setSelectedDate(minDate);\n    }\n\n    return this.selectedDate;\n  }\n\n  getTimeComponent() {\n    var _this$selectedDate, _this$selectedDate2;\n\n    let timeView = \"00:00\";\n    if (this.selectedDate != null) timeView = `${(_this$selectedDate = this.selectedDate) === null || _this$selectedDate === void 0 ? void 0 : _this$selectedDate.getHours().toString().padStart(2, \"0\")}:${(_this$selectedDate2 = this.selectedDate) === null || _this$selectedDate2 === void 0 ? void 0 : _this$selectedDate2.getMinutes().toString().padStart(2, \"0\")}`;\n    return timeView;\n  }\n  /*@computed\n  onObserveChanges() {\n     let maxDate =\n      \n     if (this.state.selectedDate == null) {\n      this.setState(\n        {\n          minDate: minDate,\n          maxDate: maxDate,\n          selectedDate: minDate,\n        },\n        () => this.onDateSelected(this.state.selectedDate)\n      );\n       console.log('MinDate:', minDate);\n      console.log('MaxDate:', maxDate);\n      console.log('Selected Date:', this.state.selectedDate);\n    }\n  }*/\n\n\n}, (_applyDecoratedDescriptor(_class.prototype, \"getMinDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getMinDate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getMaxDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getMaxDate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAvailableHours\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getAvailableHours\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getFirstAvailableHour\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getFirstAvailableHour\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getLastAvailableHour\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getLastAvailableHour\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getSelectedDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getSelectedDate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getTimeComponent\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"getTimeComponent\"), _class.prototype)), _class);\nexport const Store = new LogicStore();","map":{"version":3,"sources":["/run/media/pearlquest/DATA/rezdyV2/rezdy-ksa/src/System/Stores.ts"],"names":["action","computed","makeObservable","observable","BookingState","LogicStore","constructor","bookingState","Initial","visitorCount","product","availableSessions","selectedDate","selectedLanguage","Extras","setBookingState","setProduct","setAvailableSessions","setVisitorsCount","setSelectedDate","setLanguage","setExtras","value","console","log","date","language","extras","getMinDate","firstSession","length","startTimeLocal","Date","getMaxDate","lastSession","endTimeLocal","getAvailableHours","Store","day","getUTCDate","availableHours","filter","q","startTime","map","getFirstAvailableHour","available","getLastAvailableHour","getSelectedDate","minDate","getTimeComponent","timeView","getHours","toString","padStart","getMinutes"],"mappings":";;;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,MAA7D;AACA,SAASC,YAAT,QAA6B,uBAA7B;IAIMC,U,aAAN,MAAMA,UAAN,CAAiB;AASfC,EAAAA,WAAW,GAAG;AAAA,SARdC,YAQc,GAReH,YAAY,CAACI,OAQ5B;AAAA,SAPdC,YAOc,GAPS,CAOT;AAAA,SANdC,OAMc,GANY,IAMZ;AAAA,SALdC,iBAKc,GALwB,IAKxB;AAAA,SAJdC,YAIc,GAJc,IAId;AAAA,SAHdC,gBAGc,GAHa,SAGb;AAAA,SAFdC,MAEc,GAFG,CAEH;AACZZ,IAAAA,cAAc,CAAC,IAAD,EAAO;AACnBK,MAAAA,YAAY,EAAEJ,UADK;AAEnBM,MAAAA,YAAY,EAAEN,UAFK;AAGnBO,MAAAA,OAAO,EAAEP,UAHU;AAInBQ,MAAAA,iBAAiB,EAAER,UAJA;AAKnBS,MAAAA,YAAY,EAAET,UALK;AAMnBU,MAAAA,gBAAgB,EAAEV,UANC;AAOnBW,MAAAA,MAAM,EAAEX,UAPW;AASnBY,MAAAA,eAAe,EAAEf,MATE;AAUnBgB,MAAAA,UAAU,EAAEhB,MAVO;AAWnBiB,MAAAA,oBAAoB,EAAEjB,MAXH;AAYnBkB,MAAAA,gBAAgB,EAAElB,MAZC;AAanBmB,MAAAA,eAAe,EAAEnB,MAbE;AAcnBoB,MAAAA,WAAW,EAAEpB,MAdM;AAenBqB,MAAAA,SAAS,EAAErB;AAfQ,KAAP,CAAd;AAiBD;;AAEDe,EAAAA,eAAe,CAACO,KAAD,EAAsB;AACnC,SAAKf,YAAL,GAAoBe,KAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;AACD;;AAEDN,EAAAA,UAAU,CAACM,KAAD,EAAiB;AACzB,SAAKZ,OAAL,GAAeY,KAAf;AACD;;AAEDL,EAAAA,oBAAoB,CAACK,KAAD,EAAmB;AACrC,SAAKX,iBAAL,GAAyBW,KAAzB;AACD;;AAEDJ,EAAAA,gBAAgB,CAACI,KAAD,EAAgB;AAC9B,SAAKb,YAAL,GAAoBa,KAApB;AACD;;AAEDH,EAAAA,eAAe,CAACM,IAAD,EAAa;AAC1BF,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,IAApC;AACA,SAAKb,YAAL,GAAoBa,IAApB;AACD;;AAEDL,EAAAA,WAAW,CAACM,QAAD,EAAmB;AAC5BH,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,QAApC;AACA,SAAKb,gBAAL,GAAwBa,QAAxB;AACD;;AAEDL,EAAAA,SAAS,CAACM,MAAD,EAAiB;AACxBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,MAA7B;AACA,SAAKb,MAAL,GAAca,MAAd;AACD;;AAEDC,EAAAA,UAAU,GAAgB;AACxB,UAAMC,YAAY,GAChB,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBmB,MAAvB,GAAgC,CAAlE,GACI,KAAKnB,iBAAL,CAAuB,CAAvB,CADJ,GAEI,IAHN;AAKA,WAAOkB,YAAY,IAAI,IAAhB,GAAuBA,YAAY,CAACE,cAApC,GAAqD,IAAIC,IAAJ,EAA5D;AACD;;AAGDC,EAAAA,UAAU,GAAgB;AACxB,UAAMC,WAAW,GACf,KAAKvB,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBmB,MAAvB,GAAgC,CAAlE,GACI,KAAKnB,iBAAL,CAAuB,KAAKA,iBAAL,CAAuBmB,MAAvB,GAAgC,CAAvD,CADJ,GAEI,IAHN;AAKA,WAAOI,WAAW,IAAI,IAAf,GACHA,WAAW,CAACC,YADT,GAEH,IAAIH,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAFJ;AAGD;;AAGDI,EAAAA,iBAAiB,GAAW;AAC1B,QAAI,KAAKxB,YAAL,IAAqB,IAArB,IAA6ByB,KAAK,CAAC1B,iBAAN,IAA2B,IAA5D,EAAkE;AAAA;;AAChE,UAAI2B,GAAG,GAAG,KAAK1B,YAAL,CAAkB2B,UAAlB,EAAV;AAEA,UAAIC,cAAc,4BAAGH,KAAK,CAAC1B,iBAAT,0DAAG,sBACjB8B,MADiB,CACTC,CAAD,IAAOA,CAAC,CAACC,SAAF,CAAYJ,UAAZ,OAA6BD,GAD1B,EAElBM,GAFkB,CAEbtB,KAAD,IAAWA,KAAK,CAACS,cAFH,CAArB;AAIA,aAAOS,cAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAGDK,EAAAA,qBAAqB,GAAgB;AACnC,UAAMC,SAAS,GAAG,KAAKV,iBAAL,EAAlB;AACA,QAAIU,SAAS,CAAChB,MAAV,GAAmB,CAAvB,EAA0B,OAAOgB,SAAS,CAAC,CAAD,CAAhB;AAE1B,WAAO,IAAP;AACD;;AAGDC,EAAAA,oBAAoB,GAAgB;AAClC,UAAMD,SAAS,GAAG,KAAKV,iBAAL,EAAlB;AACA,QAAIU,SAAS,CAAChB,MAAV,GAAmB,CAAvB,EAA0B,OAAOgB,SAAS,CAACA,SAAS,CAAChB,MAAV,GAAmB,CAApB,CAAhB;AAE1B,WAAO,IAAP;AACD;;AAGDkB,EAAAA,eAAe,GAAG;AAChB,QAAIC,OAAO,GAAG,KAAKrB,UAAL,EAAd;;AAEA,QAAIqB,OAAO,IAAI,IAAf,EAAqB;AACnB,UAAI,KAAKrC,YAAL,IAAqB,IAArB,IAA6B,KAAKA,YAAL,GAAoBqC,OAArD,EACE,KAAK9B,eAAL,CAAqB8B,OAArB;AACH;;AAED,WAAO,KAAKrC,YAAZ;AACD;;AAGDsC,EAAAA,gBAAgB,GAAW;AAAA;;AACzB,QAAIC,QAAQ,GAAG,OAAf;AAEA,QAAI,KAAKvC,YAAL,IAAqB,IAAzB,EACEuC,QAAQ,GAAI,GAAD,sBAAG,KAAKvC,YAAR,uDAAG,mBACVwC,QADU,GAEXC,QAFW,GAGXC,QAHW,CAGF,CAHE,EAGC,GAHD,CAGM,IAHT,uBAGY,KAAK1C,YAHjB,wDAGY,oBACnB2C,UADmB,GAEpBF,QAFoB,GAGpBC,QAHoB,CAGX,CAHW,EAGR,GAHQ,CAGH,EANpB;AAQF,WAAOH,QAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9JiB,C,8DA4DdlD,Q,kJAUAA,Q,yJAYAA,Q,oKAeAA,Q,uKAQAA,Q,iKAQAA,Q,6JAYAA,Q;AAuCH,OAAO,MAAMoC,KAAK,GAAG,IAAIhC,UAAJ,EAAd","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { BookingState } from \"../Enums/BookingState\";\nimport { Product } from \"./Models/Product\";\nimport { Session } from \"./Models/Session\";\n\nclass LogicStore {\n  bookingState: BookingState = BookingState.Initial;\n  visitorCount: number = 1;\n  product: Product | null = null;\n  availableSessions: Session[] | null = null;\n  selectedDate: Date | null = null;\n  selectedLanguage: string = \"English\";\n  Extras: number = 0;\n\n  constructor() {\n    makeObservable(this, {\n      bookingState: observable,\n      visitorCount: observable,\n      product: observable,\n      availableSessions: observable,\n      selectedDate: observable,\n      selectedLanguage: observable,\n      Extras: observable,\n\n      setBookingState: action,\n      setProduct: action,\n      setAvailableSessions: action,\n      setVisitorsCount: action,\n      setSelectedDate: action,\n      setLanguage: action,\n      setExtras: action,\n    });\n  }\n\n  setBookingState(value: BookingState) {\n    this.bookingState = value;\n    console.log(\"BookingStateChanged:\", value);\n  }\n\n  setProduct(value: Product) {\n    this.product = value;\n  }\n\n  setAvailableSessions(value: Session[]) {\n    this.availableSessions = value;\n  }\n\n  setVisitorsCount(value: number) {\n    this.visitorCount = value;\n  }\n\n  setSelectedDate(date: Date) {\n    console.log(\"Booking Target Date:\", date);\n    this.selectedDate = date;\n  }\n\n  setLanguage(language: string) {\n    console.log(\"Booking Target Date:\", language);\n    this.selectedLanguage = language;\n  }\n\n  setExtras(extras: number) {\n    console.log(\"Wheelchairs :\", extras);\n    this.Extras = extras;\n  }\n  @computed\n  getMinDate(): Date | null {\n    const firstSession =\n      this.availableSessions != null && this.availableSessions.length > 0\n        ? this.availableSessions[0]\n        : null;\n\n    return firstSession != null ? firstSession.startTimeLocal : new Date();\n  }\n\n  @computed\n  getMaxDate(): Date | null {\n    const lastSession =\n      this.availableSessions != null && this.availableSessions.length > 0\n        ? this.availableSessions[this.availableSessions.length - 1]\n        : null;\n\n    return lastSession != null\n      ? lastSession.endTimeLocal\n      : new Date(2022, 1, 1);\n  }\n\n  @computed\n  getAvailableHours(): Date[] {\n    if (this.selectedDate != null && Store.availableSessions != null) {\n      let day = this.selectedDate.getUTCDate();\n\n      let availableHours = Store.availableSessions\n        ?.filter((q) => q.startTime.getUTCDate() === day)\n        .map((value) => value.startTimeLocal);\n\n      return availableHours;\n    }\n\n    return [];\n  }\n\n  @computed\n  getFirstAvailableHour(): Date | null {\n    const available = this.getAvailableHours();\n    if (available.length > 0) return available[0];\n\n    return null;\n  }\n\n  @computed\n  getLastAvailableHour(): Date | null {\n    const available = this.getAvailableHours();\n    if (available.length > 0) return available[available.length - 1];\n\n    return null;\n  }\n\n  @computed\n  getSelectedDate() {\n    let minDate = this.getMinDate();\n\n    if (minDate != null) {\n      if (this.selectedDate == null || this.selectedDate < minDate)\n        this.setSelectedDate(minDate);\n    }\n\n    return this.selectedDate;\n  }\n\n  @computed\n  getTimeComponent(): string {\n    let timeView = \"00:00\";\n\n    if (this.selectedDate != null)\n      timeView = `${this.selectedDate\n        ?.getHours()\n        .toString()\n        .padStart(2, \"0\")}:${this.selectedDate\n        ?.getMinutes()\n        .toString()\n        .padStart(2, \"0\")}`;\n\n    return timeView;\n  }\n\n  /*@computed\n  onObserveChanges() {\n\n    let maxDate =\n      \n\n    if (this.state.selectedDate == null) {\n      this.setState(\n        {\n          minDate: minDate,\n          maxDate: maxDate,\n          selectedDate: minDate,\n        },\n        () => this.onDateSelected(this.state.selectedDate)\n      );\n\n      console.log('MinDate:', minDate);\n      console.log('MaxDate:', maxDate);\n      console.log('Selected Date:', this.state.selectedDate);\n    }\n  }*/\n}\n\nexport const Store = new LogicStore();\n"]},"metadata":{},"sourceType":"module"}