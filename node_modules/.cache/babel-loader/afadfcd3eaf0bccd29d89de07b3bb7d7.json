{"ast":null,"code":"import { ApiService } from './Services/ApiService';\nexport function locator(type) {\n  const instance = ServiceLocator.GetInstance();\n  return instance.getServices(type);\n}\nexport class ServiceLocator {\n  constructor() {\n    this.services = {};\n    this.services['ApiService'] = new ApiService();\n  }\n\n  static GetInstance() {\n    if (ServiceLocator.Instance == null) ServiceLocator.Instance = new ServiceLocator();\n    return ServiceLocator.Instance;\n  }\n\n  getServices(type) {\n    let result;\n\n    for (const key in this.services) {\n      if (key === type.name) {\n        result = this.services[key];\n        break;\n      }\n    }\n\n    return result;\n  }\n\n}\nServiceLocator.Instance = void 0;","map":{"version":3,"sources":["/run/media/pearlquest/DATA/rezdyV2/rezdy-ksa/src/System/ServiceLocator.ts"],"names":["ApiService","locator","type","instance","ServiceLocator","GetInstance","getServices","constructor","services","Instance","result","key","name"],"mappings":"AACA,SAASA,UAAT,QAA2B,uBAA3B;AAIA,OAAO,SAASC,OAAT,CAAqCC,IAArC,EAAuD;AAC5D,QAAMC,QAAQ,GAAGC,cAAc,CAACC,WAAf,EAAjB;AACA,SAAOF,QAAQ,CAACG,WAAT,CAAqBJ,IAArB,CAAP;AACD;AAED,OAAO,MAAME,cAAN,CAAqB;AAK1BG,EAAAA,WAAW,GAAG;AAAA,SAJNC,QAIM,GAJmC,EAInC;AACZ,SAAKA,QAAL,CAAc,YAAd,IAA8B,IAAIR,UAAJ,EAA9B;AACD;;AAEwB,SAAXK,WAAW,GAAG;AAC1B,QAAID,cAAc,CAACK,QAAf,IAA2B,IAA/B,EACEL,cAAc,CAACK,QAAf,GAA0B,IAAIL,cAAJ,EAA1B;AAEF,WAAOA,cAAc,CAACK,QAAtB;AACD;;AAEMH,EAAAA,WAAW,CAAqBJ,IAArB,EAA0C;AAC1D,QAAIQ,MAAJ;;AAEA,SAAK,MAAMC,GAAX,IAAkB,KAAKH,QAAvB,EAAiC;AAC/B,UAAIG,GAAG,KAAKT,IAAI,CAACU,IAAjB,EAAuB;AACrBF,QAAAA,MAAM,GAAG,KAAKF,QAAL,CAAcG,GAAd,CAAT;AAEA;AACD;AACF;;AAED,WAAOD,MAAP;AACD;;AA5ByB;AAAfN,c,CAGIK,Q","sourcesContent":["import { IService } from './Interfaces/IService';\nimport { ApiService } from './Services/ApiService';\n\nexport type Newable<T> = { new (...args: any[]): T };\n\nexport function locator<T extends IService>(type: Newable<T>) {\n  const instance = ServiceLocator.GetInstance();\n  return instance.getServices(type) as T;\n}\n\nexport class ServiceLocator {\n  private services: { [type: string]: IService } = {};\n\n  private static Instance: ServiceLocator;\n\n  constructor() {\n    this.services['ApiService'] = new ApiService();\n  }\n\n  public static GetInstance() {\n    if (ServiceLocator.Instance == null)\n      ServiceLocator.Instance = new ServiceLocator();\n\n    return ServiceLocator.Instance;\n  }\n\n  public getServices<T extends IService>(type: Newable<T>): T {\n    let result: T | undefined;\n\n    for (const key in this.services) {\n      if (key === type.name) {\n        result = this.services[key] as T;\n\n        break;\n      }\n    }\n\n    return result as T;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}