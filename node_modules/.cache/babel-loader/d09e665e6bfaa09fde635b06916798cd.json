{"ast":null,"code":"import Axios from 'axios';\nexport class MainAxios {\n  static Init() {\n    MainAxios.Instance = Axios.create({\n      baseURL: 'https://dev.galaxyjewels.live',\n      timeout: 10000,\n      responseType: 'json'\n    });\n    MainAxios.Instance.interceptors.request.use(request => {\n      //if (request.method !== 'OPTIONS') {\n      //console.log(\"Request is different from 'OPTIONS'\");\n      if (MainAxios.GetAccessToken() !== undefined) {\n        //console.log(\"Injecting authorization header: \", MainAxios.GetAccessToken());\n        request.headers = { ...request.headers,\n          Authorization: 'Bearer ' + MainAxios.GetAccessToken()\n        };\n      }\n\n      request.headers = { ...request.headers,\n        'Content-Type': 'application/json; charset=UTF-8',\n        Accept: 'application/json'\n      }; //}\n      //console.log('Request Uri: ', request.url);\n      //console.log('Request Data: ', request.data);\n\n      return request;\n    });\n    MainAxios.Instance.interceptors.response.use(response => {\n      //console.log('Response: ', response);\n      return response;\n    });\n  }\n\n  static GetInstance() {\n    if (typeof MainAxios.Instance === 'undefined') {\n      this.Init();\n    }\n\n    return MainAxios.Instance;\n  }\n\n  static SetAccessToken(token) {\n    if (MainAxios.Instance != null) {\n      MainAxios.UserAccessToken = token;\n    }\n  }\n  /**\n   * Gets the authorization token from the memory or from the storage if exists.\n   */\n\n\n  static GetAccessToken() {\n    //if (MainAxios.UserAccessToken === undefined)\n    //  MainAxios.UserAccessToken = Storage.ReadUserJwt();\n    return MainAxios.UserAccessToken;\n  }\n\n}\nMainAxios.Instance = void 0;\nMainAxios.UserAccessToken = void 0;","map":{"version":3,"sources":["/run/media/pearlquest/DATA/rezdyV2/rezdy-ksa/src/System/MainAxios.ts"],"names":["Axios","MainAxios","Init","Instance","create","baseURL","timeout","responseType","interceptors","request","use","GetAccessToken","undefined","headers","Authorization","Accept","response","GetInstance","SetAccessToken","token","UserAccessToken"],"mappings":"AAAA,OAAOA,KAAP,MAAyD,OAAzD;AAEA,OAAO,MAAMC,SAAN,CAAgB;AAIF,SAAJC,IAAI,GAAG;AACpBD,IAAAA,SAAS,CAACE,QAAV,GAAqBH,KAAK,CAACI,MAAN,CAAa;AAChCC,MAAAA,OAAO,EAAE,+BADuB;AAEhCC,MAAAA,OAAO,EAAE,KAFuB;AAGhCC,MAAAA,YAAY,EAAE;AAHkB,KAAb,CAArB;AAMAN,IAAAA,SAAS,CAACE,QAAV,CAAmBK,YAAnB,CAAgCC,OAAhC,CAAwCC,GAAxC,CACGD,OAAD,IAAiC;AAC/B;AACA;AAEA,UAAIR,SAAS,CAACU,cAAV,OAA+BC,SAAnC,EAA8C;AAC5C;AAEAH,QAAAA,OAAO,CAACI,OAAR,GAAkB,EAChB,GAAGJ,OAAO,CAACI,OADK;AAEhBC,UAAAA,aAAa,EAAE,YAAYb,SAAS,CAACU,cAAV;AAFX,SAAlB;AAID;;AAEDF,MAAAA,OAAO,CAACI,OAAR,GAAkB,EAChB,GAAGJ,OAAO,CAACI,OADK;AAEhB,wBAAgB,iCAFA;AAGhBE,QAAAA,MAAM,EAAE;AAHQ,OAAlB,CAb+B,CAkB/B;AAEA;AACA;;AAEA,aAAON,OAAP;AACD,KAzBH;AA4BAR,IAAAA,SAAS,CAACE,QAAV,CAAmBK,YAAnB,CAAgCQ,QAAhC,CAAyCN,GAAzC,CAA8CM,QAAD,IAAc;AACzD;AACA,aAAOA,QAAP;AACD,KAHD;AAID;;AAEwB,SAAXC,WAAW,GAAkB;AACzC,QAAI,OAAOhB,SAAS,CAACE,QAAjB,KAA8B,WAAlC,EAA+C;AAC7C,WAAKD,IAAL;AACD;;AAED,WAAOD,SAAS,CAACE,QAAjB;AACD;;AAE2B,SAAde,cAAc,CAACC,KAAD,EAAsB;AAChD,QAAIlB,SAAS,CAACE,QAAV,IAAsB,IAA1B,EAAgC;AAC9BF,MAAAA,SAAS,CAACmB,eAAV,GAA4BD,KAA5B;AACD;AACF;AAED;AACF;AACA;;;AAC8B,SAAdR,cAAc,GAAW;AACrC;AACA;AAEA,WAAOV,SAAS,CAACmB,eAAjB;AACD;;AAnEoB;AAAVnB,S,CACME,Q;AADNF,S,CAEImB,e","sourcesContent":["import Axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport class MainAxios {\n  protected static Instance: AxiosInstance;\n  private static UserAccessToken: string;\n\n  private static Init() {\n    MainAxios.Instance = Axios.create({\n      baseURL: 'https://dev.galaxyjewels.live',\n      timeout: 10000,\n      responseType: 'json',\n    });\n\n    MainAxios.Instance.interceptors.request.use(\n      (request: AxiosRequestConfig) => {\n        //if (request.method !== 'OPTIONS') {\n        //console.log(\"Request is different from 'OPTIONS'\");\n\n        if (MainAxios.GetAccessToken() !== undefined) {\n          //console.log(\"Injecting authorization header: \", MainAxios.GetAccessToken());\n\n          request.headers = {\n            ...request.headers,\n            Authorization: 'Bearer ' + MainAxios.GetAccessToken(),\n          };\n        }\n\n        request.headers = {\n          ...request.headers,\n          'Content-Type': 'application/json; charset=UTF-8',\n          Accept: 'application/json',\n        };\n        //}\n\n        //console.log('Request Uri: ', request.url);\n        //console.log('Request Data: ', request.data);\n\n        return request;\n      }\n    );\n\n    MainAxios.Instance.interceptors.response.use((response) => {\n      //console.log('Response: ', response);\n      return response;\n    });\n  }\n\n  public static GetInstance(): AxiosInstance {\n    if (typeof MainAxios.Instance === 'undefined') {\n      this.Init();\n    }\n\n    return MainAxios.Instance;\n  }\n\n  public static SetAccessToken(token: string): void {\n    if (MainAxios.Instance != null) {\n      MainAxios.UserAccessToken = token;\n    }\n  }\n\n  /**\n   * Gets the authorization token from the memory or from the storage if exists.\n   */\n  public static GetAccessToken(): string {\n    //if (MainAxios.UserAccessToken === undefined)\n    //  MainAxios.UserAccessToken = Storage.ReadUserJwt();\n\n    return MainAxios.UserAccessToken;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}