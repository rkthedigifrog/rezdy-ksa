{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { defaultOptions } from './constants/default-options.constant';\n\nvar ClassTransformer = function () {\n  function ClassTransformer() {}\n\n  ClassTransformer.prototype.classToPlain = function (object, options) {\n    var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, __assign(__assign({}, defaultOptions), options));\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToPlainFromExist = function (object, plainObject, options) {\n    var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, __assign(__assign({}, defaultOptions), options));\n    return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.plainToClass = function (cls, plain, options) {\n    var executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n    return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.plainToClassFromExist = function (clsObject, plain, options) {\n    var executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n    return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToClass = function (object, options) {\n    var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToClassFromExist = function (object, fromObject, options) {\n    var executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, __assign(__assign({}, defaultOptions), options));\n    return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.serialize = function (object, options) {\n    return JSON.stringify(this.classToPlain(object, options));\n  };\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n\n\n  ClassTransformer.prototype.deserialize = function (cls, json, options) {\n    var jsonObject = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  };\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n\n\n  ClassTransformer.prototype.deserializeArray = function (cls, json, options) {\n    var jsonObject = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  };\n\n  return ClassTransformer;\n}();\n\nexport { ClassTransformer };","map":{"version":3,"sources":["../../src/ClassTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClassTransformOptions } from './interfaces';\nimport { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { ClassConstructor } from './interfaces';\nimport { defaultOptions } from './constants/default-options.constant';\n\nexport class ClassTransformer {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n   */\n  classToPlain<T extends Record<string, any>>(object: T, options?: ClassTransformOptions): Record<string, any>;\n  classToPlain<T extends Record<string, any>>(object: T[], options?: ClassTransformOptions): Record<string, any>[];\n  classToPlain<T extends Record<string, any>>(\n    object: T | T[],\n    options?: ClassTransformOptions\n  ): Record<string, any> | Record<string, any>[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts class (constructor) object to plain (literal) object.\n   * Uses given plain object as source object (it means fills given plain object with data from class object).\n   * Also works with arrays.\n   */\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObject: P,\n    options?: ClassTransformOptions\n  ): T;\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObjects: P[],\n    options?: ClassTransformOptions\n  ): T[];\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObject: P | P[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n   */\n  plainToClass<T extends Record<string, any>, V extends Array<any>>(\n    cls: ClassConstructor<T>,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T[];\n  plainToClass<T extends Record<string, any>, V>(\n    cls: ClassConstructor<T>,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T;\n  plainToClass<T extends Record<string, any>, V>(\n    cls: ClassConstructor<T>,\n    plain: V | V[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts plain (literal) object to class (constructor) object.\n   * Uses given object as source object (it means fills given object with data from plain object).\n   * Also works with arrays.\n   */\n  plainToClassFromExist<T extends Record<string, any>, V extends Array<any>>(\n    clsObject: T,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T;\n  plainToClassFromExist<T extends Record<string, any>, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T[];\n  plainToClassFromExist<T extends Record<string, any>, V>(\n    clsObject: T,\n    plain: V | V[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n   */\n  classToClass<T>(object: T, options?: ClassTransformOptions): T;\n  classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\n  classToClass<T>(object: T | T[], options?: ClassTransformOptions): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts class (constructor) object to plain (literal) object.\n   * Uses given plain object as source object (it means fills given plain object with data from class object).\n   * Also works with arrays.\n   */\n  classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\n  classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\n  classToClassFromExist<T>(object: T, fromObject: T | T[], options?: ClassTransformOptions): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Serializes given object to a JSON string.\n   */\n  serialize<T>(object: T, options?: ClassTransformOptions): string;\n  serialize<T>(object: T[], options?: ClassTransformOptions): string;\n  serialize<T>(object: T | T[], options?: ClassTransformOptions): string {\n    return JSON.stringify(this.classToPlain(object, options));\n  }\n\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n  deserialize<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T {\n    const jsonObject: T = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  }\n\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n  deserializeArray<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T[] {\n    const jsonObject: any[] = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}